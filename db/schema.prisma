generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma" // to not worry about foreign ket constrains 
}

model Product {
    id          String           @id @default(cuid())
    name        String
    category    String
    business    String
    spec        String?
    description String
    price       Int // in cents
    imageUrl    String
    tokenValue  Int
    receipts    ReceiptProduct[]

    @@index([id])
}

model Receipt {
    id        String           @id @default(cuid())
    createdAt DateTime         @default(now())
    userId    String?
    products  ReceiptProduct[]

    @@index([id])
}

model TokensIssued {
    id           String   @id @default(cuid())
    userId       String?
    tokensAmount Int
    createdAt    DateTime @default(now())
    issued       Boolean  @default(false)
}

model UserTokensBalance {
    userId        String   @unique
    tokensBalance Int
    createdAt     DateTime @default(now())
}

model Reward {
    id           String   @id @default(cuid())
    tokensAmount Int
    name   String
    createdAt    DateTime @default(now())
    imageUrl     String
    description  String? @db.Text
}


model ReceiptProduct {
    receiptId String
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    // Define foreign keys and references to Receipts and Products
    receipt   Receipt  @relation(fields: [receiptId], references: [id])
    product   Product  @relation(fields: [productId], references: [id])

    @@id([receiptId, productId]) // Ensures uniqueness of receipt and product combination within a receipt
    @@index([receiptId])
    @@index([productId])
}

model Category {
    id          Int     @id @default(autoincrement())
    name        String
    description String? @db.Text
    imageUrl    String? @db.Text
}

model Article {
    id          Int     @id @default(autoincrement())
    imageUrl String
    title    String
    link     String?
    text     String? @db.Text
}

//include: {
//     products: true,
//   },
